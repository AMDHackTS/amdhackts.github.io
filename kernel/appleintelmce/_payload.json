[{"data":1,"prerenderedAt":128},["ShallowReactive",2],{"search-api":3},[4,11,19,28,35,41,48,55,61,67,73,79,85,93,106,113,119],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     AMD Hackintosh Troubleshooting Guide   Guide that contains solutions for problems during installation and after installing macOS on an AMD computer   This guide is made by personal researches and actual fixes found mostly on   AMD OS X  Discord server. ",{"id":12,"path":13,"dir":14,"title":15,"description":16,"keywords":17,"body":18},"content:1.about:1.getting-started.md","/about/getting-started","about","What in the world is Hackintosh ?","A Hackintosh is a computer that runs macOS on computer hardware that is not authorized for the purpose by Apple. Wiki",[],"  What in the world is Hackintosh ?  A Hackintosh is a computer that runs macOS on computer hardware that is not authorized for the purpose by Apple.   Wiki   ⚠️ Per   Dortania , Hackintoshing isn't illegal, but it is breaking the EULA.    Why in the world would someone want that ?      Cost saving   Building a Hackintosh can be significantly cheaper than buying a real Mac.    Custom hardware   Users can choose their own hardware, often opting for more powerful parts than those available in real Mac devices.    Software compatibility   Some users need macOS for specific software that is not available on Windows or Linux.    Experimentation   Enthusiasts and hobbyists enjoy experimenting with different operating systems and configurations.    Pure love for macOS   Some users simply prefer the macOS environment and its ecosystem but do not want to invest in Apple's hardware.    Learning experience   Setting up a Hackintosh is a technical challenge that can be educational and rewarding for those interested in computer hardware and software.   This guide will be updated with every new thing that I learn/see.",{"id":20,"path":21,"dir":22,"title":23,"description":7,"keywords":24,"body":27},"content:2.Bootissues:1.vaulterrors.md","/bootissues/vaulterrors","bootissues","Vault errors",[25,26],"Stuck on No Vault Provided","Stuck on Invalid Vault mode","  Vault errors  Stuck on   No Vault Provided   To fix this error, you should edit your config.plist.   \nFind   Misc > Security > Vault  and change it to:    Optional  Stuck on   Invalid Vault mode  This is an spelling mistake, options in OpenCore are case-sensitive.   \nValue for Vault should be   Optional  (capital   O ).",{"id":29,"path":30,"dir":22,"title":31,"description":7,"keywords":32,"body":34},"content:2.Bootissues:2.driver.md","/bootissues/driver","Driver cannot be found",[33],"OC: Driver x.efi at Y cannot be found","  Driver cannot be found   OC: Driver x.efi at Y cannot be found   The driver entry is found in config.plist, but it isn't in your EFI.   Do an   OC Snapshot  using   ProperTree  in your config.plist to snapshot your EFI.",{"id":36,"path":37,"dir":22,"title":38,"description":7,"keywords":39,"body":40},"content:2.Bootissues:3.loadimage.md","/bootissues/loadimage","LoadImage Failed - Unsupported",[],"  LoadImage Failed - Unsupported   In this case, OpenCore isn't able to boot the macOS.  Most likely it's caused by missing   HFS+  driver.",{"id":42,"path":43,"dir":22,"title":44,"description":7,"keywords":45,"body":47},"content:2.Bootissues:4.7thgen.md","/bootissues/7thgen","7th Gen stuck on Prohibited sign",[46],"To fix this:","  7th Gen stuck on Prohibited sign   Prohibited sign can be caused by many things, but it's present on almost every PC running 7th gen Ryzen.  To fix this:   Enable DevirtualizeMmio  Whitelist some Mmio entries, use   MmioDevirt  to do this.",{"id":49,"path":50,"dir":51,"title":52,"description":7,"keywords":53,"body":54},"content:3.Kernel:1.Securityviol.md","/kernel/securityviol","kernel","Security Violation",[],"  Security Violation    Disable   SecureBootModel   SecureBootModel must be   Disabled  during the installation of macOS 14 (Sonoma).",{"id":56,"path":57,"dir":51,"title":58,"description":7,"keywords":59,"body":60},"content:3.Kernel:2.macosunsupported.md","/kernel/macosunsupported","This version of Mac OS X is not supported",[],"  This version of Mac OS X is not supported   This error is caused by using an unsupported SMBIOS for provided macOS.   For desktop PC, you should be using   MacPro7,1  SMBIOS, for laptops use   MacBookPro16,3 .",{"id":62,"path":63,"dir":51,"title":64,"description":7,"keywords":65,"body":66},"content:3.Kernel:3.rtcpcie.md","/kernel/rtcpcie","RTC, HPED, PCI...",[],"  RTC, HPED, PCI...   This is the moment where PCI devices are first setup and configured.  Things to check:    Unsupported NVMe drive or bad SATA controller can cause this. Check   Dortania's hardware limitations  page.  Make sure that you have your EC SSDT (per Dortania)",{"id":68,"path":69,"dir":51,"title":70,"description":7,"keywords":71,"body":72},"content:3.Kernel:4.appleintelmce.md","/kernel/appleintelmce","AppleIntelMCEReporter",[],"  AppleIntelMCEReporter   This error is manifested in early reboots or stalls.   \nAdd   AppleMCEReportedDisabled  to your EFI.   This kext is required for Monterey+ on MacPro7,1; MacPro6,1 and iMacPro1,1.",{"id":74,"path":75,"dir":51,"title":76,"description":7,"keywords":77,"body":78},"content:3.Kernel:5.instareboot.md","/kernel/instareboot","Instant reboot",[],"  Instant reboot   Depending on the actual case, this problem can occure with having   Above 4G Decoding  disabled in your BIOS, as it should be enabled.   \nIf there is no   Above 4G Decoding  in your BIOS, add   npci=0x3000  to your boot-args.    If you are running macOS Sonoma, make sure that   SecureBootModel  is set to   Disabled .",{"id":80,"path":81,"dir":51,"title":82,"description":7,"keywords":83,"body":84},"content:3.Kernel:6.appleacpicpu.md","/kernel/appleacpicpu","AppleACPICPU",[],"  AppleACPICPU   This error can be fixed by enabling   Above 4G Decoding  or adding   npci=0x3000  in your boot-args.    If that's not the case, it can be caused by either missing SMC emulator or having a broken one. (per Dortania)     Add both Lilu and VirtualSMC to your EFI.  Make sure that Lilu is being loaded before VirtualSMC (ProperTree will do that).  Try using FakeSMC instead.",{"id":86,"path":87,"dir":51,"title":88,"description":7,"keywords":89,"body":92},"content:3.Kernel:7.invalidframe.md","/kernel/invalidframe","Invalid Frame Pointer",[90,91],"If your device supports MAT set:","If your device doesn't support MAT set:","  Invalid Frame Pointer   Mainly caused by misconfigured Quirks in   Booter > Quirks .   \nTo fix, check these:    SetupVirtualMap  - If you are using A520, B550 or TRx40 chipset, disable this, otherwise enable it.  Check if your system supports MAT: look at   OPENCORE-timestamp.log , it should say   OCABC: MAT support is 0/1   0 is for unsupported, 1 for supported.  If your device supports MAT set:    EnableWriteUnprotector  to   False   RebuildAppleMemoryMap  to   True   SyncRuntimePermissions  to   True  If your device doesn't support MAT set:    EnableWriteUnprotector  to   True   RebuildAppleMemoryMap  to   False   SyncRuntimePermissions  to   False",{"id":94,"path":95,"dir":51,"title":96,"description":7,"keywords":97,"body":105},"content:3.Kernel:8.kaslr.md","/kernel/kaslr","KASLR (Memory Map)",[98,99,100,101,102,103,104],"What's KASLR ?","What's the problem ?","Fu*k How to fix this ?","More fixes - BIOS","It isn't ? Wtf Here are some more fixes","How to apply this ?","Wow, thanks","  KASLR (Memory Map)   What's KASLR ?  KASLR (  K ernel   A ddress   S pace   L ayout   R andomization) is used for loading the kernel. It's used for security purposes.\nKASLR makes it much harder for attackers to figure out where the important objects are in memory as it's always random.  What's the problem ?   Who knows ?  There are   256  different places in memory where   boot.efi  will load the kernel.   \nIn real Mac devices, all 256 places are open, thus they allow the kernel to be loaded randomly in memory.    Here is the show...  But, as we don't have real Mac devices, our memory maps aren't set up in a way that suits the macOS kernel, and in some cases boot.efi cannot be loaded.   \nThis error can be manifested in many ways:    Only 244/256 slide values are usable!   Couldn't allocate runtime area   panic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000  Memory map dump in OpenCore log   Fu*k  How to fix this ?  You can let OpenCore to do it's job - it can analyze the memory map and attempt to pick an applicable   slide  value. This is only possible if   ProvideCustomSlide  is enabled.    slide  will tell   boot.efi  where to load the kernel.  If that's not working, you can enable   DevirtualiseMmio . That will free some regions up to make more room for the kernel to load.  And if that's not working,   you're screwed  you can try these:   Enable   AvoidRuntimeDefrag  Enable   EnableSafeModeSlide  Enable   RebuildAppleMemoryMap  More fixes - BIOS  If none of those previous fixes aren't working, you should go to your BIOS and do these:   Update BIOS  Clear CMOS  Enable   Above 4G Decoding  Disable   CSM ,   Parallel Port ,   Serial Port ,   Thunderbolt ,   LED Lighting  and   Legacy USB  Finnaly, you can test if your machine is booting.  It isn't ?   Wtf  Here are some more fixes  You can manually set the   slide  value. For this, you'll need OpenShell.   Boot   OpenShell.efi  and run   fs0:  then   memmap > memmap.txt . Then boot into your main OS and open   memmap.txt  inside the root of your USB  In that file, you should find the largest available value within the   Start  column. Those values are in HEX.   \nNext, you want to calculate the actual slide value. To do it, do this simple calculation:    (slide_value - 0x100000) / 0x200000      You need to replace zeros at the beggining of the HEX value with 0x  You can run that calculation on Google, it will give you the decimal value. If the result isn't round number, just add   +1  to it.  \nFor example, I'll use   00000000A3F3F000 .\nFirst, I need to replace zeros with 0x, so it will be   0xA3F3F000 . Then I can run the calculation.   What the fu*k the value is 1312 ?!?!?  Yeah...   \nThis is caused by using   Above 4G Decoding . Those sectors can't be used.   Holy moly .   \nYou'll have to find the small enough value. In my case, that would be   0000000001080000  (  0x1080000 ).   \nThe result for this value is   8 .  How to apply this ?  To apply this, go to your   config.plist , find   boot-args  and add   slide=x . Replace   x  with calculated slide value.  Wow, thanks  Don't thank me, this guide is written by my personal understandings, but I learn them from   Dortania's guide  and   CorpNewt . Big thanks to them.",{"id":107,"path":108,"dir":109,"title":110,"description":7,"keywords":111,"body":112},"content:4.Other issues:1.Installer in Russian.md","/other-issues/installer-in-russian","other-issues","Installer in Russian",[],"  Installer in Russian   Slavs rule the Hackintosh world :)  To fix this, change   prev-lang:kbd  value under   NVRAM > Add > 7C4...  to   656e2d55533a30 .",{"id":114,"path":115,"dir":109,"title":116,"description":7,"keywords":117,"body":118},"content:4.Other issues:2.acidanthera.md","/other-issues/acidanthera","Acidanthera motherboard in Windows",[],"  Acidanthera motherboard in Windows   This is caused by passing macOS SMBIOS to Windows with OpenCore. Windows thinks that it's instaleed on real Mac device.    To fix this, you'll need to edit your   config.plist :    CustomSMBIOSGuid  to   True   UpdateSMBIOSMode  to   Custom   You can bypass this by booting Windows using Windows Boot Manager and not OpenCore, but it's not convinient.",{"id":120,"path":121,"dir":122,"title":123,"description":7,"keywords":124,"body":127},"content:5.tutorials:1.disdgpu.md","/tutorials/disdgpu","tutorials","Disable GPU",[125,126],"Use boot-args","Use device properties","  Disable GPU   Some GPUs aren't supported in macOS, so the only way to get the macOS to run with them in the device is to actually disable them.   Check   Dortania's GPU buyers guide  for more info about supported GPUs.   You need to disable CSM in your BIOS!  Use boot-args  Simplest way to do this is to add   -wegnoegpu  to your boot-args.   Don't use this if you are using an laptop. It will disable the unsupported GPU but it will still draw power to it.  Use device properties  Download   gfxutil , find the PCI route by running   gfxutil -f GFX0    \nOutput will result something like this:   DevicePath = PciRoot(0x0)/Pci...     Now open your config.plist, find   DeviceProperties > Add , create an child with your PCI route, change type to Dictionary and add another child with    Key = disable-gpu ,   Type = Boolean  and   Value = True .",1722292547871]